name: Fixed CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: "1.23.9"  # Exact version match with Dockerfile.dev

jobs:
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-24.04  # Match Dockerfile.dev base
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build development environment
        run: docker compose build dev

      - name: Run comprehensive test suite
        run: |
          docker compose run --rm dev bash -c "
            set -e
            echo '=== Running Go Format Check ==='
            if [ -n \"\$(gofmt -l .)\" ]; then
              echo 'Code needs formatting:'
              gofmt -l .
              exit 1
            fi

            echo '=== Running Go Vet ==='
            go vet ./...

            echo '=== Running Tests with Coverage ==='
            CGO_ENABLED=1 go test -tags ci -v -race -coverprofile=coverage.out -covermode=atomic ./...
            go tool cover -html=coverage.out -o coverage.html

            echo '=== Running Linter ==='
            golangci-lint run --timeout=5m

            echo '=== Test Results Summary ==='
            echo 'All tests passed!'
          "

      - name: Extract coverage file
        run: |
          docker compose run --rm dev cat /workspace/coverage.out > coverage.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Security Scans
    runs-on: ubuntu-24.04
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build development environment
        run: docker compose build dev

      - name: Run security scans
        run: |
          docker compose run --rm dev bash -c "
            set -e
            echo '=== Running gosec Security Scanner ==='
            gosec -fmt sarif -out gosec-results.sarif ./...

            echo '=== Running govulncheck ==='
            govulncheck ./...

            echo '=== Running Trivy File System Scan ==='
            trivy fs --format sarif --output trivy-results.sarif --severity CRITICAL,HIGH,MEDIUM .

            echo '=== Security scan results ==='
            ls -la *-results.sarif || echo 'No SARIF files generated'
          "

      - name: Extract SARIF files
        run: |
          docker compose run --rm dev bash -c "
            if [ -f gosec-results.sarif ]; then
              cat gosec-results.sarif
            fi
          " > gosec-results.sarif 2>/dev/null || echo "No gosec results"

          docker compose run --rm dev bash -c "
            if [ -f trivy-results.sarif ]; then
              cat trivy-results.sarif
            fi
          " > trivy-results.sarif 2>/dev/null || echo "No trivy results"

      - name: Upload gosec results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec-results.sarif
        continue-on-error: true

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif
        continue-on-error: true

  build:
    name: Cross-Platform Build
    needs: [test, security]
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build development environment
        run: docker compose build dev

      - name: Build binary for ${{ matrix.goos }}-${{ matrix.goarch }}
        run: |
          mkdir -p dist
          output_name="pi-scanner-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            output_name="${output_name}.exe"
          fi

          docker compose run --rm dev bash -c "
            CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
            go build -ldflags='-s -w' -o dist/${output_name} ./cmd/pi-scanner
          "

      - name: Extract binary
        run: |
          docker compose run --rm dev cat /workspace/dist/pi-scanner-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} > dist/pi-scanner-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pi-scanner-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*

  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-24.04
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build development environment
        run: docker compose build dev

      - name: Run benchmarks
        run: |
          docker compose run --rm dev bash -c "
            go test -bench=. -benchmem -run=^$ ./... | tee benchmark.txt
          " > benchmark.txt

      - name: Comment benchmark results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const benchmarkResults = fs.readFileSync('benchmark.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## Benchmark Results\n```\n' + benchmarkResults + '\n```'
            });

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  integration:
    name: End-to-End Integration Tests
    needs: [test]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build development environment
        run: docker compose build dev

      - name: Run E2E tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker compose run --rm dev bash -c "
            echo '=== Running End-to-End Tests ==='
            go test -tags ci -v ./test -run TestPIScannerE2E -timeout=10m
          "
