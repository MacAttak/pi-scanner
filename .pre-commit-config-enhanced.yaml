# Enhanced Pre-commit hooks with Quality Gates for GitHub PI Scanner
# Install: pre-commit install
# Run manually: pre-commit run --all-files
# Update hooks: pre-commit autoupdate

# Minimum quality thresholds
minimum_pre_commit_version: 3.0.0
default_language_version:
  python: python3
fail_fast: false  # Run all hooks even if one fails

repos:
  # Quick formatting checks (fail fast on these)
  - repo: local
    hooks:
      # Go formatting and imports
      - id: go-fmt
        name: Check Go formatting
        entry: bash -c 'if [ -n "$(gofmt -l .)" ]; then echo "Files need formatting:"; gofmt -l .; exit 1; fi'
        language: system
        types: [go]

      - id: go-imports
        name: Check Go imports
        entry: bash -c 'command -v goimports >/dev/null 2>&1 && (test -z "$(goimports -l .)" || (echo "Files need import formatting:"; goimports -l .; exit 1)) || echo "goimports not installed, skipping"'
        language: system
        types: [go]

      # Static analysis
      - id: go-vet
        name: Run go vet
        entry: go vet ./...
        language: system
        pass_filenames: false
        types: [go]

      # Linting with specific rules
      - id: golangci-lint
        name: Run golangci-lint
        entry: bash -c 'command -v golangci-lint >/dev/null 2>&1 && golangci-lint run --timeout=5m || echo "golangci-lint not installed, skipping"'
        language: system
        pass_filenames: false
        types: [go]

      # Module tidiness
      - id: go-mod-tidy
        name: Check go.mod tidiness
        entry: bash -c 'cp go.mod go.mod.bak && cp go.sum go.sum.bak && go mod tidy && if ! cmp -s go.mod go.mod.bak || ! cmp -s go.sum go.sum.bak; then rm go.mod.bak go.sum.bak && echo "go.mod/go.sum not tidy. Run go mod tidy" && exit 1; else rm go.mod.bak go.sum.bak; fi'
        language: system
        pass_filenames: false

  # Quality gates (enforce standards)
  - repo: local
    hooks:
      # Test coverage threshold
      - id: test-coverage
        name: Check test coverage (minimum 70%)
        entry: bash -c 'go test -coverprofile=coverage.out ./... && coverage=$(go tool cover -func=coverage.out | grep total | awk "{print \$3}" | sed "s/%//"); rm coverage.out; if [ "${coverage%.*}" -lt 70 ]; then echo "Test coverage ${coverage}% is below 70% threshold"; exit 1; else echo "Test coverage ${coverage}% meets threshold"; fi'
        language: system
        pass_filenames: false
        types: [go]
        stages: [push]  # Only on push, not every commit

      # Unit tests must pass
      - id: go-test-short
        name: Run Go tests (short mode)
        entry: go test -short -race ./...
        language: system
        pass_filenames: false
        types: [go]

      # Performance benchmarks
      - id: check-benchmarks
        name: Run performance benchmarks
        entry: bash -c 'go test -bench=. -benchmem -run=^$ ./pkg/detection/... | tee bench.txt && if grep -q "FAIL" bench.txt; then rm bench.txt; exit 1; else rm bench.txt; fi'
        language: system
        pass_filenames: false
        types: [go]
        stages: [push]  # Only on push

      # Build validation
      - id: go-build
        name: Verify code builds
        entry: go build ./...
        language: system
        pass_filenames: false
        types: [go]

  # Security scanning
  - repo: local
    hooks:
      - id: gosec
        name: Security scan with gosec
        entry: bash -c 'command -v gosec >/dev/null 2>&1 && gosec -fmt text -severity medium -quiet ./... || echo "gosec not installed, skipping"'
        language: system
        pass_filenames: false
        types: [go]

      - id: go-vulncheck
        name: Vulnerability check
        entry: bash -c 'command -v govulncheck >/dev/null 2>&1 && govulncheck ./... || echo "govulncheck not installed, skipping"'
        language: system
        pass_filenames: false
        types: [go]

  # Documentation and configuration
  - repo: local
    hooks:
      - id: check-docs
        name: Validate documentation
        entry: bash -c 'if [ ! -f README.md ]; then echo "README.md is missing"; exit 1; fi'
        language: system
        pass_filenames: false

      - id: check-license
        name: Verify license file
        entry: bash -c 'if [ ! -f LICENSE ]; then echo "LICENSE file is missing"; exit 1; fi'
        language: system
        pass_filenames: false

  # Standard pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: check-yaml
        args: ['--unsafe']  # Allow custom tags
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-added-large-files
        args: ['--maxkb=500']
      - id: end-of-file-fixer
      - id: trailing-whitespace
        args: ['--markdown-linebreak-ext=md']
      - id: check-merge-conflict
      - id: detect-private-key
      - id: mixed-line-ending
        args: ['--fix=lf']
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable

  # Secret scanning
  - repo: https://github.com/zricethezav/gitleaks
    rev: v8.21.3
    hooks:
      - id: gitleaks

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.43.0
    hooks:
      - id: markdownlint
        args: ['--fix', '--disable', 'MD013', 'MD033']  # Allow long lines and HTML

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        args: ['--severity=warning']

# Configuration for specific hooks
ci:
  # Run only specific hooks in CI
  skip: [test-coverage, check-benchmarks]  # These run separately in CI
  autofix_prs: false  # Don't auto-fix in CI
