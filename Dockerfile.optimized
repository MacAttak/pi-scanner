# Multi-stage build for GitHub PI Scanner with pre-built dependencies
# Stage 1: Download pre-built tokenizers
FROM alpine:3.19 AS tokenizers-downloader

RUN apk add --no-cache wget tar

WORKDIR /download

# Download pre-built tokenizers for the target architecture
ARG TARGETPLATFORM
RUN echo "Platform: $TARGETPLATFORM" && \
    if [ "$TARGETPLATFORM" = "linux/arm64" ]; then \
        TOKENIZERS_ARCH="linux-aarch64"; \
    elif [ "$TARGETPLATFORM" = "linux/amd64" ]; then \
        TOKENIZERS_ARCH="linux-x86_64"; \
    else \
        TOKENIZERS_ARCH="linux-x86_64"; \
    fi && \
    echo "Downloading tokenizers for $TOKENIZERS_ARCH" && \
    wget -q https://github.com/daulet/tokenizers/releases/download/v1.20.2/libtokenizers.${TOKENIZERS_ARCH}.tar.gz && \
    tar -xzf libtokenizers.${TOKENIZERS_ARCH}.tar.gz && \
    ls -la

# Stage 2: Build Go application
FROM golang:1.23-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git gcc musl-dev

# Set working directory
WORKDIR /build

# Copy go mod files first for better caching
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy tokenizers library from previous stage
COPY --from=tokenizers-downloader /download/libtokenizers.a /usr/local/lib/
COPY --from=tokenizers-downloader /download/*.h /usr/local/include/

# Copy source code
COPY . .

# Build the application with proper library paths
ENV CGO_ENABLED=1
ENV CGO_LDFLAGS="-L/usr/local/lib -static"
ENV CGO_CFLAGS="-I/usr/local/include"

# Build with static linking for easier distribution
RUN go build -ldflags="-s -w -extldflags '-static'" -o pi-scanner ./cmd/pi-scanner

# Runtime stage
FROM ubuntu:22.04

# Install runtime dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    ca-certificates \
    git \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Install ONNX Runtime (architecture-specific)
ARG ONNX_VERSION=1.20.0
ARG TARGETPLATFORM
RUN if [ "$TARGETPLATFORM" = "linux/arm64" ]; then \
        ONNX_ARCH="aarch64"; \
    else \
        ONNX_ARCH="x64"; \
    fi && \
    wget -q https://github.com/microsoft/onnxruntime/releases/download/v${ONNX_VERSION}/onnxruntime-linux-${ONNX_ARCH}-${ONNX_VERSION}.tgz && \
    tar -xzf onnxruntime-linux-${ONNX_ARCH}-${ONNX_VERSION}.tgz && \
    cp -r onnxruntime-linux-${ONNX_ARCH}-${ONNX_VERSION}/lib/*.so* /usr/local/lib/ && \
    rm -rf onnxruntime-linux-${ONNX_ARCH}-${ONNX_VERSION}* && \
    ldconfig

# Create non-root user
RUN useradd -m -u 1000 scanner

# Copy binary from builder
COPY --from=builder /build/pi-scanner /usr/local/bin/pi-scanner

# Copy default config
COPY --from=builder /build/pkg/config/default_config.yaml /etc/pi-scanner/default_config.yaml

# Create directories
RUN mkdir -p /home/scanner/.pi-scanner/models /home/scanner/output && \
    chown -R scanner:scanner /home/scanner

# Switch to non-root user
USER scanner
WORKDIR /home/scanner

# Set environment variables
ENV ONNX_RUNTIME_PATH="/usr/local/lib/libonnxruntime.so"
ENV HOME="/home/scanner"
ENV PI_SCANNER_CONFIG="/etc/pi-scanner/default_config.yaml"

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD pi-scanner version || exit 1

# Default command
ENTRYPOINT ["pi-scanner"]
CMD ["--help"]

# Labels
LABEL org.opencontainers.image.title="PI Scanner"
LABEL org.opencontainers.image.description="Detect and protect personal information in GitHub repositories"
LABEL org.opencontainers.image.url="https://github.com/MacAttak/pi-scanner"
LABEL org.opencontainers.image.source="https://github.com/MacAttak/pi-scanner"
LABEL org.opencontainers.image.vendor="MacAttak"
LABEL org.opencontainers.image.licenses="MIT"